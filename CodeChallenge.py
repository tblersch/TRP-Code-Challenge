import re

#Data structure to hold results.  Since the challenge says "Create a function to return"
#   both values, we create a class to hold the values, and return an instance of the class
class Word:
    word = ''
    length = 0

def FindLongestWord(sentence):
    #Let Python do the heavy lifting for us.  Split the sentence into groups with regex pattern 
    #   of word characters including apostrophes and hyphens that are bounded by word characters
    #   (to include possessives and hyphenated compound words), to filter out punctuation.  
    #   Then, to be safe, filter out any zero-length strings - these can be generated by the regex
    #   match under certain conditions, and it's easier to handle those conditions by deleting
    #   the matches rather than handling them in the regex.
    result = Word()
    if sentence != '':
        words = [i for i in re.findall("(\w[\w'-]*\w)", sentence) if len(i) > 0]
        if words.count != 0:
            words.sort(key=len)
            #Having sorted, the longest word is the last word in the list.  However, there
            #   may be multiple words of that length, so we'll get the first "longest word"
            #   by grabbing the subset of all the words of that length, and grabbing
            #   the first in that subset
            #Nice little feature of Python: negative indexing.  Don't have to calculate the last index in
            #   the list as ((length of list)-1).  Just use the negative index -1.
            result.length = len(words[-1])
            longestwords = [i for i in words if len(i) == result.length]
            result.word = longestwords[0]
    return result


def FindShortestWord(sentence):
    #Identical to FindLongestWord, except we grab the first item in the sorted list.
    result = Word()
    if sentence != '':
        words = [i for i in re.findall("(\w[\w'-]*\w)", sentence) if len(i) > 0]
        if words.count != 0:
            words.sort(key=len)
            #Having sorted, the shortest word is always the first word in the list.  
            result.word = words[0]
            result.length = len(words[0])
    return result
